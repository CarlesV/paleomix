#!/usr/bin/python -3
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import sys
import pysam
import subprocess


def convert_to_bool(lines):
    in_seq = False
    for line in lines:
        if line.startswith("~~"):
            in_seq = False
        elif line.startswith("~"):
            in_seq = True
            yield ">%s" % line[1:].rstrip()
        elif in_seq:
            yield "".join(("1" if (char == "!") else "0") for char in line.rstrip("\n\r"))


def main_compress(argv):
    in_filename = argv[0]
    out_filename = argv[1] + ".bmap"
    with open(in_filename) as handle:
        with open(out_filename, "w") as output:
            try:
                call = ["razip", "-c", "/dev/stdin"]
                proc = subprocess.Popen(call,
                                        stdin  = subprocess.PIPE,
                                        stdout = output,
                                        close_fds = True)

                for line in convert_to_bool(handle):
                    proc.stdin.write(line + "\n")

                proc.stdin.close()
                if proc.wait():
                    return 1
            except OSError, e:
                sys.stderr.write("Error while compressing input:\n")
                sys.stderr.write("  Command: %s\n" % " ".join(call))
                sys.stderr.write("  Input file: %s\n" % in_filename)
                sys.stderr.write("  Output file: %s\n" % out_filename)
                sys.stderr.write("\n")
                raise

            subprocess.check_call(["samtools", "faidx", out_filename])


def main(argv):
    if not argv or argv[0] not in ("compress",):
        print "Usage:"
        print "  %s compress input prefix" % sys.argv[0]
        print "    -- Compresses a GEM mappability file into a simple FASTA-like format"
        print "       which allows rapid retrievel of intervals using samtools/pysam/etc."
        return 0
    elif (argv[0] == "compress") and (len(argv) == 3):
        return main_compress(argv[1:])

    # Wrong number of args, etc
    return main(None)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
