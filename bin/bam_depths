#!/usr/bin/python
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import os
import sys
import optparse

import pypeline
import pypeline.logger

from pypeline.common.console import print_info
from pypeline.common.fileutils import swap_ext
from pypeline.nodes.samtools import BAMIndexNode
from pypeline.nodes.depthhist import DepthHistogramNode


def parse_config(argv):
    parser = optparse.OptionParser()
    parser.add_option("--intervals", default = None)
    parser.add_option("--temp-root", default = "/tmp")
    parser.add_option("--max-threads", type = int, default = 1)
    parser.add_option("--dry-run", action = "store_true", default = False)

    pypeline.logger.add_optiongroup(parser)

    return parser.parse_args(argv)


def main(argv):
    config, args = parse_config(argv)
    if not len(args):
        print_info("Usage: %s [<bamfile> ...]" % sys.argv[0])
        return 0

    pypeline.logger.initialize(config, None)

    pipeline = pypeline.Pypeline(config)
    for filename in set(args):
        pipeline.add_nodes(DepthHistogramNode(config         = None,
                                              input_files    = filename,
                                              output_file    = swap_ext(filename, ".depths"),
                                              intervals_file = config.intervals,
                                              target_name    = os.path.basename(filename),
                                              print_stats    = True,
                                              dependencies   = BAMIndexNode(filename)))

    pipeline.run(max_running = config.max_threads, dry_run = config.dry_run)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
