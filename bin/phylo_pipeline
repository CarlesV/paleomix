#!/usr/bin/python
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import sys


def _has_required_modules():
    if (sys.version_info.major != 2) or (sys.version_info.minor not in (6, 7)):
        sys.stderr.write("ERROR: Python version 2.6.x or 2.7.x required!\n")
        sys.stderr.write("       Current version is v%s\n\n" % (sys.version.replace("\n", " "),))
        return False

    try:
        from pypeline.requirements import check_pypeline_requirements
    except ImportError:
        error = sys.exc_info()[1]
        sys.stderr.write("ERROR: Could not import required Pypeline module pypeline.requirements:\n\t- %s\n\n" % (error,))
        sys.stderr.write("       Please make sure that PYTHONPATH points to the location of the 'pypeline' module.\n")
        sys.stderr.write("       This may be done permanently by adding the following to your ~/.bashrc file:\n")
        sys.stderr.write("         export PYTHONPATH=${PYTHONPATH}:/path/to/pypeline/checkout/...\n\n")
        return False

    return check_pypeline_requirements()


def main(argv):
    if not _has_required_modules():
        return 1

    import pypeline.tools.phylo_pipeline.pipeline
    return pypeline.tools.phylo_pipeline.pipeline.main(argv)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
