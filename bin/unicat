#!/usr/bin/python
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
"""
Wrapper around cat / zcat / bzcat, which selects the appropriate commmand based
on the files specified on the command-line. Input files may be a mix of different
types of compressed / uncompressed files.
"""

import sys
import optparse
import itertools
import subprocess


def _select_output(filename):
    if not filename or (filename == '-'):
        return sys.stdout
    return open(filename, 'wb')


def _select_cat(filename):
    with open(filename) as source:
        header = source.read(2)
        # The command "gzip -cd" is used instead of "zcat" because
        # OSX ships a broken zcat command (only accepts *.Z files).
        if header == "\x1f\x8b":
            return ("gzip", "-cd")
        elif header == "BZ":
            return ("bzip2", "-cd")
        return ("cat",)


def _call(input_files, output_file):
    with _select_output(output_file) as out_handle:
        for (command, filenames) in itertools.groupby(input_files, _select_cat):
            command = list(command)
            command.extend(filenames)

            proc = subprocess.Popen(command,
                                    stdout    = out_handle,
                                    close_fds = True)
            if proc.wait():
                return proc.returncode
    return 0


def main(argv):
    parser = optparse.OptionParser("%prog [OPTION] <FILE_1> [<FILE_2> ...]")
    parser.add_option("--output", default = None,
                      help = "Write output to this file. Defaults to STDOUT.")

    config, args = parser.parse_args(argv)
    if not args:
        parser.print_usage(sys.stderr)
        sys.stderr.write("ERROR: At least one input file must be specified\n")
        return 1

    return _call(input_files = args,
                output_file  = config.output)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
