diff --git a/Users/mischu/Downloads/AdapterRemoval-1.3.cc b/Users/mischu/bin/AdapterRemoval-1.3-GG1.cc
index fb4eb28..9ff240e 100644
--- a/Users/mischu/Downloads/AdapterRemoval-1.3.cc
+++ b/Users/mischu/bin/AdapterRemoval-1.3-GG1.cc
@@ -13,7 +13,7 @@
 
 using namespace std;
 
-string VERSION="AdapterRemoval ver. 1.3";
+string VERSION="AdapterRemoval ver. 1.3-GG1";
 
 string HELPTEXT="This program searches for and removes remnant adapter sequences from your read data. The program can analyze both single end and paired end data. Usage:\nAdapterRemoval [--file|file1 filename] [--file2 filename] [--basename filename] [--trimns] [--trimqualities] [--minquality minimum] [--collapse] [--stats] [--version] [--mm mismatchrate] [--minlength len] [--minalignmentlength len] [--qualitybase base] [--shift num] [--pcr1 sequence] [--pcr2 sequence] [--5prime sequence] [--output1 file] [--output2 file] [--outputstats file] [--singleton file] [--singletonstats file] [--discarded file] [--settings file]\n\nFor detailed explanation of the parameters, please refer to the man page. If nothing else, at least input your read data to the program (either stdin or from af fastq file).\nFor comments, suggestions and feedback please contact Stinus Lindgreen (stinus@binf.ku.dk).";
 
@@ -114,36 +114,46 @@ size_t min(size_t a,size_t b){
   else return b;
 }
 
-inline string toupper(string s){
-  string news="";
-  for(size_t i=0;i<s.length();i++){
-    if(int(s[i]) >= 65 && int(s[i]) <= 90) news=news+s[i];
-    else news=news+char(int(s[i])-32);
+
+
+inline string replace_dots(const string& s){
+  string news = s;
+  for(size_t i=0;i<news.length();i++){
+    if(news.at(i) == '.'){
+      news.at(i) = 'N';
+    }
   }
+
   return news;
 }
 
-string reverse(string seq){
-  string reverse="";
-  for(size_t i=0;i<seq.length();i++){
-    reverse=seq[i]+reverse;
+
+inline string toupper(const string& s){
+  string news = s;
+  for(size_t i=0;i<s.length();i++){
+    if(s[i] >= 'a' && s[i] <= 'z'){
+      news[i] -= 32;
+    }
   }
-  return reverse;
+
+  return news;
 }
 
-string complement(string seq){
-  string complement="";
+inline string reverse(const string& seq){
+  return string(seq.rbegin(), seq.rend());
+}
+
+string complement(const string& seq){
+  string complement = seq;
   for(size_t i=0;i<seq.length();i++){
     if(seq[i]=='A')
-      complement=complement+"T";
+      complement[i]='T';
     else if(seq[i]=='C')
-      complement=complement+"G";
+      complement[i]='G';
     else if(seq[i]=='G')
-      complement=complement+"C";
+      complement[i]='C';
     else if(seq[i]=='T')
-      complement=complement+"A";
-    else // Ns etc. are just kept
-      complement=complement+seq[i];
+      complement[i]='A';
   }
   return complement;
 }
@@ -161,7 +171,7 @@ double score(char n1,char n2,char q1, char q2){
   }
 }
 
-string reverse_complement(string seq){
+string reverse_complement(const string& seq){
   return reverse(complement(seq));
 }
 
@@ -1005,5 +1015,8 @@ int main(int argc, char *argv[]){
   (*settings)<<"\nNumber of "<<((usefile2)?"read pairs":"reads")<<" with adapter: "<<numberofseqswithadapter<<endl;
   if(collapse) (*settings)<<"Number of collapsed pairs: "<<numberofcollapsedpairs<<endl;
   (*settings)<<"Average read length of trimmed reads: "<<((totalnumberofgoodreads>0)?(totalnumberofnucleotides/totalnumberofgoodreads):0)<<endl;
+  (*settings)<<"Number of retained reads: "<<totalnumberofgoodreads<<endl;
+  (*settings)<<"Number of retained nucleotides: "<<totalnumberofnucleotides<<endl;
+
   return 0;
 }
